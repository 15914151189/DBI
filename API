# API for DBI package

## Exported functions

ANSI()
SQL(x)
SQLKeywords(dbObj, ...)
dbBegin(conn, ...)
dbBind(res, params, ...)
dbBreak()
dbCallProc(conn, ...)
dbClearResult(res, ...)
dbColumnInfo(res, ...)
dbCommit(conn, ...)
dbConnect(drv, ...)
dbDataType(dbObj, obj, ...)
dbDisconnect(conn, ...)
dbDriver(drvName, ...)
dbExecute(conn, statement, ...)
dbExistsTable(conn, name, ...)
dbFetch(res, n = -1, ...)
dbGetDBIVersion()
dbGetException(conn, ...)
dbGetInfo(dbObj, ...)
dbGetQuery(conn, statement, ...)
dbGetRowCount(res, ...)
dbGetRowsAffected(res, ...)
dbGetStatement(res, ...)
dbHasCompleted(res, ...)
dbIsValid(dbObj, ...)
dbListConnections(drv, ...)
dbListFields(conn, name, ...)
dbListResults(conn, ...)
dbListTables(conn, ...)
dbQuoteIdentifier(conn, x, ...)
dbQuoteString(conn, x, ...)
dbReadTable(conn, name, ...)
dbRemoveTable(conn, name, ...)
dbRollback(conn, ...)
dbSendQuery(conn, statement, ...)
dbSendStatement(conn, statement, ...)
dbSetDataMappings(res, flds, ...)
dbUnloadDriver(drv, ...)
dbWithTransaction(conn, code, ...)
dbWriteTable(conn, name, value, ...)
fetch(res, n = -1, ...)
isSQLKeyword(dbObj, name, keywords = .SQL92Keywords, case = c("lower", "upper", "any")[3], ...)
isSQLKeyword.default(name, keywords = .SQL92Keywords, case = c("lower", "upper", "any")[3])
make.db.names(dbObj, snames, keywords = .SQL92Keywords, unique = TRUE, allow.keywords = TRUE, ...)
make.db.names.default(snames, keywords = .SQL92Keywords, unique = TRUE, allow.keywords = TRUE)
print.list.pairs(x, ...)
sqlAppendTable(con, table, values, row.names = NA, ...)
sqlAppendTableTemplate(con, table, values, row.names = NA, prefix = "?", ...)
sqlColumnToRownames(df, row.names = NA)
sqlCommentSpec(start, end, endRequired)
sqlCreateTable(con, table, fields, row.names = NA, temporary = FALSE, ...)
sqlData(con, value, row.names = NA, ...)
sqlInterpolate(conn, sql, ..., .dots = list())
sqlParseVariables(conn, sql, ...)
sqlParseVariablesImpl(sql, quotes, comments)
sqlQuoteSpec(start, end, escape, doubleEscape = TRUE)
sqlRownamesToColumn(df, row.names = NA)

## Exported data

.SQL92Keywords: character (character[220])
