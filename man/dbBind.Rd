% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/DBResult.R
\name{dbBind}
\alias{dbBind}
\title{Bind values to a parameterised/prepared statement}
\usage{
dbBind(res, params, ...)
}
\arguments{
\item{res}{An object inheriting from \code{\linkS4class{DBIResult}}.}

\item{params}{A list of bindings}

\item{...}{Other arguments passed on to methods.}
}
\description{
For parametrised or prepared statements,
the \code{\link[=dbSendQuery]{dbSendQuery()}} function can be called with queries
that contain placeholders for values. The \code{\link[=dbBind]{dbBind()}} function
(documented here) binds these placeholders
to actual values, and is intended to be called on the result of
\code{\link[=dbSendQuery]{dbSendQuery()}} before calling \code{\link[=dbFetch]{dbFetch()}}.
}
\details{
Parametrised or prepared statements are executed as follows:
\enumerate{
\item Call \code{\link[DBI:dbSendQuery]{DBI::dbSendQuery()}} or \code{\link[DBI:dbSendStatement]{DBI::dbSendStatement()}} with a query or statement
that contains placeholders,
store the returned \code{\linkS4class{DBIResult}} object in a variable.
Mixing placeholders (in particular, named and unnamed ones) is not
recommended.
It is good practice to register a call to \code{\link[DBI:dbClearResult]{DBI::dbClearResult()}} via
\code{\link[=on.exit]{on.exit()}} right after calling \code{dbSendQuery()}, see the last
enumeration item.
\item Construct a list with parameters
that specify actual values for the placeholders.
The list must be named or unnamed,
depending on the kind of placeholders used.
Named values are matched to named parameters, unnamed values
are matched by position.
All elements in this list must have the same lengths and contain values
supported by the backend; a \code{\link[=data.frame]{data.frame()}} is internally stored as such
a list.
The parameter list is passed a call to \code{\link[=dbBind]{dbBind()}} on the \code{DBIResult}
object.
\item Retrieve the data or the number of affected rows from the  \code{DBIResult} object.
\itemize{
\item For queries issued by \code{dbSendQuery()},
call \code{\link[DBI:dbFetch]{DBI::dbFetch()}}.
\item For statements issued by \code{dbSendStatements()},
call \code{\link[DBI:dbGetRowsAffected]{DBI::dbGetRowsAffected()}}.
(Execution begins immediately after the \code{dbBind()} call,
the statement is processed entirely before the function returns.
Calls to \code{dbFetch()} are ignored.)
}
\item Repeat 2. and 3. as necessary.
\item Close the result set via \code{\link[DBI:dbClearResult]{DBI::dbClearResult()}}.
}
}
\examples{
\dontrun{
con <- dbConnect(RSQLite::SQLite(), ":memory:")

dbWriteTable(con, "iris", iris)
iris_result <- dbSendQuery(con, "SELECT * FROM iris WHERE [Petal.Width] > ?")
dbBind(iris_result, list(2.3))
dbFetch(iris_result)
dbBind(iris_result, list(3))
dbFetch(iris_result)

dbClearResult(iris_result)
dbDisconnect(con)
}
}
\seealso{
Other DBIResult generics: \code{\link{DBIResult-class}},
  \code{\link{SQL}}, \code{\link{dbClearResult}},
  \code{\link{dbColumnInfo}}, \code{\link{dbFetch}},
  \code{\link{dbGetInfo}}, \code{\link{dbGetRowCount}},
  \code{\link{dbGetRowsAffected}},
  \code{\link{dbGetStatement}},
  \code{\link{dbHasCompleted}}, \code{\link{dbIsValid}}
}

