% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/DBConnection.R
\name{dbGetChunkedQuery}
\alias{dbGetChunkedQuery}
\alias{dbGetChunkedQuery,DBIConnection,character-method}
\title{Use a callback to access the result of a query}
\usage{
dbGetChunkedQuery(conn, statement, callback, ...)
}
\arguments{
\item{conn}{A \code{\linkS4class{DBIConnection}} object, as produced by
\code{\link{dbConnect}}.}

\item{statement}{a character vector of length 1 containing SQL.}

\item{callback}{a callback function whose first argument must be
the result set returned by the \code{statement}.}

\item{...}{Other parameters passed on to methods.}
}
\value{
A function that accepts the same arguments as the
 \code{callback} (except the first one, which the result set).
}
\description{
This function allows you to get the result of a query according
to a callback you specify. This is meant as a more efficient and
more general alternative to \code{\link{dbSendQuery}}. On one
hand, it does not keep the result set open, so you don't have to
worry about \code{\link{dbClearResult}}. On the other hand, you
can fetch the result according to your own liking, not only by
fetching an x number of consecutive rows.
}
\examples{
con <- dbConnect(RSQLite::SQLite(), ":memory:")
dbWriteTable(con, "cars", cars)
res <- dbGetChunkedQuery(con, "SELECT * FROM cars", `[`)
res(1:3,)   # get the first 3 rows
res(15,)    # get the 15th row
dbDisconnect(con)
}
\seealso{
Other connection methods: \code{\link{dbDisconnect}},
  \code{\link{dbExecQuery}}, \code{\link{dbExistsTable}},
  \code{\link{dbGetException}}, \code{\link{dbGetQuery}},
  \code{\link{dbListFields}}, \code{\link{dbListResults}},
  \code{\link{dbListTables}}, \code{\link{dbReadTable}},
  \code{\link{dbRemoveTable}}, \code{\link{dbSendQuery}}
}

